steps:
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      cp -rf $(system.defaultWorkingDirectory)/* $(modulePath)
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: "Set up the Go workspace"

  - script: go get -d ./...
    workingDirectory: "$(modulePath)"
    displayName: "Get dependencies"

  - script: |
      az version
    displayName: "Download binaries"

  # - script: echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]load-e2e-$(openssl rand -hex 6)"
  #   displayName: "Set cluster name"

  # - script: |
  #     echo "##vso[task.setvariable variable=AZURE_ADMIN_USERNAME]$USER"
  #     echo -e 'y\n' | ssh-keygen -f ~/.ssh/$(AZURE_CLUSTER_NAME) -t rsa -N ''
  #     echo "##vso[task.setvariable variable=AZURE_SSH_KEY]$(cat ~/.ssh/$(AZURE_CLUSTER_NAME).pub)"
  #     echo "##vso[task.setvariable variable=LOCAL_SSH_KEY]$HOME/.ssh/$(AZURE_CLUSTER_NAME)"
  #   displayName: "Generate SSH key"

  # - script: |
  #     envsubst < definition.json > cluster.json
  #   workingDirectory: "$(modulePath)"
  #   displayName: "Build AKS-Engine API Model"
  #   env:
  #     CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

  # - script: |
  #     aks-engine deploy --api-model cluster.json --location ${AZURE_LOCATION} --subscription-id ${AZURE_SUBSCRIPTION_ID} --force-overwrite --client-id ${AZURE_CLIENT_ID} --client-secret ${CLIENT_SECRET}
  #     # wait for nodes
  #     sleep 60
  #     cp _output/${AZURE_CLUSTER_NAME}/kubeconfig/kubeconfig.${AZURE_LOCATION}.json $(modulePath)/kubeconfig.json
  #   displayName: "Deploy Azure cluster"
  #   workingDirectory: "$(modulePath)"
  #   env:
  #     CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
