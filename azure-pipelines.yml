trigger: none

variables:
  GOBIN: "$(GOPATH)/bin" # Go binaries path
  GOROOT: "/usr/lib/go-1.12" # Go installation path
  GOPATH: "$(system.defaultWorkingDirectory)/go" # Go workspace path
  modulePath: "$(GOPATH)/src/k8s.io/perf-tests" # Path to the module's code

jobs:
  # Scalability Test
  - job: scalability_test
    displayName: Scalability Test
    pool: Upstream Pool
    steps:
      - script: |
          mkdir -p '$(GOBIN)'
          mkdir -p '$(GOPATH)/pkg'
          mkdir -p '$(modulePath)'
          shopt -s extglob
          mv $(system.defaultWorkingDirectory)/* $(modulePath)
          echo '##vso[task.prependpath]$(GOBIN)'
          echo '##vso[task.prependpath]$(GOROOT)/bin'
        displayName: "Set up the Go workspace"

      - script: go get -d ./...
        workingDirectory: "$(modulePath)"
        displayName: "Get dependencies"

      - script: |
          # curl -LO https://github.com/Azure/aks-engine/releases/download/v${AKS_ENGINE_VERSION}/aks-engine-v${AKS_ENGINE_VERSION}-linux-amd64.tar.gz
          # tar -zxvf aks-engine-v${AKS_ENGINE_VERSION}-linux-amd64.tar.gz
          # chmod +x aks-engine-v${AKS_ENGINE_VERSION}-linux-amd64/aks-engine
          # sudo mv aks-engine-v${AKS_ENGINE_VERSION}-linux-amd64/aks-engine /usr/local/bin/
          curl -LO https://sertacstorage.blob.core.windows.net/aks-engine/aks-engine
          chmod +x aks-engine
          sudo mv aks-engine /usr/local/bin
        displayName: "Download aks-engine"

      - script: echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]e2e-$(openssl rand -hex 6)"
        displayName: "Set cluster name"

      - script: |
          echo "##vso[task.setvariable variable=AZURE_ADMIN_USERNAME]$USER"
          echo "##vso[task.setvariable variable=AGENT_POOL_COUNT]100"
          echo -e 'y\n' | ssh-keygen -f ~/.ssh/$(AZURE_CLUSTER_NAME) -t rsa -N ''
          echo "##vso[task.setvariable variable=AZURE_SSH_KEY]$(cat ~/.ssh/$(AZURE_CLUSTER_NAME).pub)"
          echo "##vso[task.setvariable variable=LOCAL_SSH_KEY]$USER/.ssh/$(AZURE_CLUSTER_NAME)"
        displayName: "Generate SSH key"

      - script: |
          envsubst < definition.json > cluster.json
        workingDirectory: "$(modulePath)"
        displayName: "Build apimodel"
        env:
          CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

      - script: |
          aks-engine deploy --api-model cluster.json --location ${AZURE_LOCATION} --subscription-id ${AZURE_SUBSCRIPTION_ID} --force-overwrite --client-id ${AZURE_CLIENT_ID} --client-secret ${CLIENT_SECRET}
          cp _output/${AZURE_CLUSTER_NAME}/kubeconfig/kubeconfig.${AZURE_LOCATION}.json $(modulePath)/kubeconfig.json
        displayName: "Deploy Azure cluster"
        workingDirectory: "$(modulePath)"
        env:
          CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

      - script:
          ./run-e2e.sh cluster-loader2 --nodes=100 --provider=local --report-dir=_artifacts \
          --kubeconfig="$(modulePath)/kubeconfig.json" \
          --master-internal-ip=10.240.255.5 \
          --masterip=${AZURE_CLUSTER_NAME}.${AZURE_LOCATION}.cloudapp.azure.com \
          --mastername=k8s-master-$(cat _output/${AZURE_CLUSTER_NAME}/azuredeploy.json | jq .variables.masterVMNamePrefix | cut -c13-20)-0 \
          --prometheus-scrape-etcd \
          --testconfig=testing/density/config.yaml \
          --testconfig=testing/load/config.yaml \
          --testoverrides=./testing/density/100_nodes/override.yaml
        workingDirectory: "$(modulePath)"
        displayName: "Run scalability test"

      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: $(modulePath)/clusterloader2/_artifacts/junit.xml
        condition: succeededOrFailed()

      - script: |
          az login -t microsoft.com --service-principal -u ${AZURE_CLIENT_ID} -p ${CLIENT_SECRET}
          az group delete -n ${AZURE_CLUSTER_NAME} --subscription ${AZURE_SUBSCRIPTION_ID} --yes
        displayName: "Teardown cluster"
        condition: succeededOrFailed()
        env:
          CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

  # Node Throughput Test
  - job: node_throughput_test
    displayName: Node Throughput Test
    pool: Upstream Pool
    steps:
      - script: |
          mkdir -p '$(GOBIN)'
          mkdir -p '$(GOPATH)/pkg'
          mkdir -p '$(modulePath)'
          shopt -s extglob
          mv $(system.defaultWorkingDirectory)/* $(modulePath)
          echo '##vso[task.prependpath]$(GOBIN)'
          echo '##vso[task.prependpath]$(GOROOT)/bin'
        displayName: "Set up the Go workspace"

      - script: go get -d ./...
        workingDirectory: "$(modulePath)"
        displayName: "Get dependencies"

      - script: |
          # curl -LO https://github.com/Azure/aks-engine/releases/download/v${AKS_ENGINE_VERSION}/aks-engine-v${AKS_ENGINE_VERSION}-linux-amd64.tar.gz
          # tar -zxvf aks-engine-v${AKS_ENGINE_VERSION}-linux-amd64.tar.gz
          # chmod +x aks-engine-v${AKS_ENGINE_VERSION}-linux-amd64/aks-engine
          # sudo mv aks-engine-v${AKS_ENGINE_VERSION}-linux-amd64/aks-engine /usr/local/bin/
          curl -LO https://sertacstorage.blob.core.windows.net/aks-engine/aks-engine
          chmod +x aks-engine
          sudo mv aks-engine /usr/local/bin
        displayName: "Download aks-engine"

      - script: echo "##vso[task.setvariable variable=AZURE_CLUSTER_NAME]e2e-$(openssl rand -hex 6)"
        displayName: "Set cluster name"

      - script: |
          echo "##vso[task.setvariable variable=AZURE_ADMIN_USERNAME]$USER"
          echo "##vso[task.setvariable variable=AGENT_POOL_COUNT]1"
          echo -e 'y\n' | ssh-keygen -f ~/.ssh/$(AZURE_CLUSTER_NAME) -t rsa -N ''
          echo "##vso[task.setvariable variable=AZURE_SSH_KEY]$(cat ~/.ssh/$(AZURE_CLUSTER_NAME).pub)"
          echo "##vso[task.setvariable variable=LOCAL_SSH_KEY]$USER/.ssh/$(AZURE_CLUSTER_NAME)"
        displayName: "Generate SSH key"

      - script: |
          envsubst < definition.json > cluster.json
        workingDirectory: "$(modulePath)"
        displayName: "Build apimodel"
        env:
          CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

      - script: |
          aks-engine deploy --api-model cluster.json --location ${AZURE_LOCATION} --subscription-id ${AZURE_SUBSCRIPTION_ID} --force-overwrite --client-id ${AZURE_CLIENT_ID} --client-secret ${CLIENT_SECRET}
          cp _output/${AZURE_CLUSTER_NAME}/kubeconfig/kubeconfig.${AZURE_LOCATION}.json $(modulePath)/kubeconfig.json
        displayName: "Deploy Azure cluster"
        workingDirectory: "$(modulePath)"
        env:
          CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

      - script:
          ./run-e2e.sh cluster-loader2 --nodes=1 --provider=local --report-dir=_artifacts \
          --kubeconfig="$(modulePath)/kubeconfig.json" \
          --master-internal-ip=10.240.255.5 \
          --masterip=${AZURE_CLUSTER_NAME}.${AZURE_LOCATION}.cloudapp.azure.com \
          --mastername=k8s-master-$(cat _output/${AZURE_CLUSTER_NAME}/azuredeploy.json | jq .variables.masterVMNamePrefix | cut -c13-20)-0 \
          --testconfig=testing/node-throughput/config.yaml
        workingDirectory: "$(modulePath)"
        displayName: "Run node throughput test"

      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: $(modulePath)/clusterloader2/_artifacts/junit.xml
        condition: succeededOrFailed()

      - script: |
          az login -t microsoft.com --service-principal -u ${AZURE_CLIENT_ID} -p ${CLIENT_SECRET}
          az group delete -n ${AZURE_CLUSTER_NAME} --subscription ${AZURE_SUBSCRIPTION_ID} --yes
        displayName: "Teardown cluster"
        condition: succeededOrFailed()
        env:
          CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
